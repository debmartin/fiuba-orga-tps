#include <mips/regdef.h>
#include <sys/syscall.h>
.abicalls
.text
.align 2
.global mips32_plot
.entity mips32_plot
mips32_plot:
#define FRAME_SPACE ...
.frame $fp, FRAME_SPACE, ra
#.cpload t9
.cprestore FRAME_SPACE-Padding-$(del ra)-4(del fp)
sw $fp, FRAME_SPACE-Padding-4(del ra)
sw ra, FRAME_SPACE-Padding
#Pongo el stack pointer al final de mi frame.
subu sp, sp, FRAME_SPACE
#Pongo el frame pointer al final de mi frame.
add $fp, sp, zero
sw a0, FRAME_SPACE($fp)

#Offset dentro de la estructura param.
#define OFF_UPPER_LEFT_REAL 0      #float: 1 registro
#define OFF_UPPER_LEFT_IMAG 4      #float: 1 registro
#define OFF_LOWER_RIGHT_REAL 8      #float: 1 registro
#define OFF_LOWER_RIGHT_IMAG 12      #float: 1 registro
#define OFF_SCALE_REAL 16      #float: 1 registro
#define OFF_SCALE_IMAG 20      #float: 1 registro
#define OFF_RES_REAL 24      #size_t = unsigned long: 2 registros
#define OFF_RES_IMAG 32      #size_t = unsigned long: 2 registros
#define OFF_SHADES 40      #size_t = unsigned long: 2 registros
#define OFF_OUTPUT_FILE 48      #puntero: 1 registro
#Offset del numero de archivo en la estructura _sFile
#define OFF_FILE_NUMBER 112      #numero: 1 registro

#t0 para el Upper Left Real y lo guardo en el primer lugar de la LTA.
lw f0, OFF_UPPER_LEFT_REAL(a0)
sw f0, ... #Principio de la LTA
#ídem la parte imaginaria, que guardo abajo
lw f0, OFF_UPPER_LEFT_IMAG(a0)
sw f0, ...
# Lower Right real
lw f0, OFF_LOWER_RIGHT_REAL(a0)
sw f0, ...
# Lower Right imag
lw f0, OFF_LOWER_RIGHT_IMAG(a0)
sw f0, ...
# Scale real
lw f0, OFF_SCALE_REAL(a0)
sw f0, ...
# Scale imag
lw f0, OFF_SCALE_IMAG(a0)
sw f0, ...
# Resolution real
ld t0, OFF_RES_REAL(a0)     #Usa t0 y t1.
sd t0, ...
# Resolution imag
ld t0, OFF_RES_IMAG(a0)
sd t0, ...
# Shades
ld t0, OFF_SHADES(a0)
sd t0, ...
#Output file number
la t0, OFF_OUTPUT_FILE(a0)
lw t0, OFF_FILE_NUMBER(t0)
sw t0, ...



# Para imprimir error:
li v0, 15
li a0, STD_ERR
la a1, error_file
li a2, LARGO_ERROR
syscall
ba salida_error

# Para imprimir Strings:
li v0, 15
  #Supongo que en t0 está el file descriptor
add a0, t0, zero
la a1, p2 #o dirección del String
li a2, LARGO_P2 #o largo del String
syscall
# Si me devolvió un número negativo en v0, hubo error.
blt v0, zero, salida_error

salida_error:
li v0, SYS_exit
syscall


.rdata
#define LARGO_P2 3
p2: .asciiz "P2\n"
#define LARGO_ERROR 25
error_file: .asciiz "cannot flush output file.\n"
enter: .asciiz "\n"

