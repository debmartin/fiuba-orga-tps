#include <mips/regdef.h>
#include <sys/syscall.h>
.abicalls
.align 2
.global mips32_plot
.entity mips32_plot
mips32_plot:
#define FRAME_SPACE ...
.frame $fp, FRAME_SPACE, ra
//.cpload t9
.cprestore FRAME_SPACE-Padding-$(del ra)-4(del fp)
sw $fp, FRAME_SPACE-Padding-4(del ra)
sw ra, FRAME_SPACE-Padding
//Pongo el stack pointer al final de mi frame.
subu sp, sp, FRAME_SPACE
//Pongo el frame pointer al final de mi frame.
or sp, zero, $fp
//Guardo el a0 que es el puntero a la estructura param_t en la ABA.
sw a0, FRAME_SPACE($fp)

//Offset dentro de la estructura param.
#define OFF_UPPER_LEFT_REAL 0
#define OFF_UPPER_LEFT_IMAG 4
#define OFF_LOWER_RIGHT_REAL 8
#define OFF_LOWER_RIGHT_IMAG 12
#define OFF_SCALE_REAL 16
#define OFF_SCALE_IMAG 20
#define OFF_RES_REAL 24
#define OFF_RES_IMAG 32
#define OFF_SHADES 40
#define OFF_OUTPUT_FILE 48
//Offset del numero de archivo en la estructura _sFile
#define OFF_FILE_NUMBER 112

//t0 para el Upper Left Real y lo guardo en el primer lugar de la LTA.
lw t0, OFF_UPPER_LEFT_REAL(a0)
sw t0, ... //Principio de la LTA
//Ã­dem la parte imaginaria, que guardo abajo
lw t0, OFF_UPPER_LEFT_IMAG(a0)
sw t0, ...
// Lower Right real
lw t0, OFF_LOWER_RIGHT_REAL(a0)
sw t0, ...
// Lower Right imag
lw t0, OFF_LOWER_RIGHT_IMAG(a0)
sw t0, ...
// Scale real
lw t0, OFF_SCALE_REAL(a0)
sw t0, ...
// Scale imag
lw t0, OFF_SCALE_IMAG(a0)
sw t0, ...
// Resolution real
lw t0, OFF_RES_REAL(a0)
sw t0, ...
// Resolution imag
lw t0, OFF_RES_IMAG(a0)
sw t0, ...
// Shades
lw t0, OFF_SHADES(a0)
sw t0, ...
//Output file
lw t0, OFF_OUTPUT_FILE(a0)
sw t0, ...

